package calendarMessages

import (
	"fmt"
	"github.com/calendar-bot/pkg/bots/telegram"
	"github.com/calendar-bot/pkg/types"
	"github.com/goodsign/monday"
	"strings"
	"time"
)

const (
	eventNameText                  = "<b>%s</b>\n\n"
	eventNoTitleText               = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
	eventTimeText                  = "‚è∞ %s, <u>%s</u> - %s<u>%s</u>\n"
	eventTimeFullDay               = "‚è∞ %s %s, <u>–í–µ—Å—å –¥–µ–Ω—å</u>\n"
	eventPlaceText                 = "üìç %s\n"
	eventOrganizerText             = "–°–æ–∑–¥–∞—Ç–µ–ª—å - <b>%s</b> (%s)\n"
	eventSplitLine                 = "---------------\n"
	eventCalendarText              = "üóì –ö–∞–ª–µ–Ω–¥–∞—Ä—å <b>%s</b>"
	eventAttendeesHeaderText       = "<u><i>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</i></u>\n\n"
	eventAttendeeText              = "%s (%s) "
	eventAttendeeStatusAccepted    = "‚úÖ\n"
	eventAttendeeStatusNeedsAction = "‚ùì\n"
	eventAttendeeStatusDeclined    = "‚ùå\n"
	eventDescriptionHeader         = "<u><i>–û–ø–∏—Å–∞–Ω–∏–µ:</i></u>\n\n"
	eventConfroomsHeader           = "<u><i>–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:</i></u>\n\n"

	eventTodayTitle = "<b>–í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>"
	eventDateTitle  = "<b>–í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è –∑–∞ %s</b>"
	eventNextTitle  = "<b>–í–∞—à–µ —Å–ª–µ–¥—É—é—à–µ–µ —Å–æ–±—ã—Ç–∏–µ</b>"

	eventGetDateHeader  = "<b>–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É: </b>\n\n"
	eventGetDateMessage = "–î–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ " +
		"<pre>&lt;—á–∏—Å–ª–æ&gt; &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞&gt;</pre> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <pre>22 –º–∞—Ä—Ç–∞</pre>)"

	eventNoTodayEventsFound  = "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π —Å–µ–≥–æ–¥–Ω—è"
	eventNoDateEventsFound   = "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É"
	eventNoClosestEventFound = "–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π —Å–µ–≥–æ–¥–Ω—è"

	eventDateNotParsed   = "–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
	eventSessionNotFound = "–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω—É–∂–Ω–æ–π –≤–∞–º " +
		"–∫–æ–º–∞–Ω–¥–æ–π –∑–∞–Ω–æ–≤–æ"
	eventShowNotFoundError = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏.\n–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ." +
		"\n–ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ."
	eventCallbackResponseText = "–°–æ–±—ã—Ç–∏–µ: %s"

	eventCancelSearchDate   = "–û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –∑–∞ –æ–ø—Ä–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É"
	eventCanceledSearchDate = "–ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω"

	createEventHeader    = "<b>–ß—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è:</b>\n\n"
	createEventTitle     = "<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> %s\n"
	createEventAllDay    = "–≤–µ—Å—å –¥–µ–Ω—å"
	createEventDateStart = "‚è∞ <b>–ù–∞—á–∞–ª–æ:</b> %s %s\n"
	createEventDateEnd   = "‚è∞ <b>–ö–æ–Ω–µ—Ü:</b> %s %s\n"

	createEventInitText = "<b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è</b>\n\n–î–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è" +
		" –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <pre>&lt;—á–∏—Å–ª–æ&gt; &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞&gt; " +
		"&lt;–ß–ß:–ú–ú&gt;</pre> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <pre>22 –º–∞—Ä—Ç–∞ 15:00</pre>)"
	createEventCancelText   = "–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"
	createEventCanceledText = "–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ"

	middlewaresUserNotAuthenticated = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –ø–æ–∫–∞ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç–µ—Å—å –≤ –±–æ—Ç–µ —á–µ—Ä–µ–∑" +
		" –∞–∫–∫–∞—É–Ω—Ç mail.ru. –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start."
	middlewaresGroupAlertBase  = "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å "
	middlewaresGroupAlertToday = "<b>–í–°–ï–ú</b> —Å–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?"
	middlewaresGroupAlertNext  = "<b>–í–°–ï–ú</b> —Å–≤–æ—ë —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?"
	middlewaresGroupAlertDate  = "<b>–í–°–ï–ú</b> —Å–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É?"
)

const (
	formatDate = "2 January 2006"
	formatTime = "15:04"
	locale     = monday.LocaleRuRU
)

const (
	callLinkButton = "üì≤ –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫"
	showMoreButton = "üîª –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å"
	showLessButton = "üî∫ –°–≤–µ—Ä–Ω—É—Ç—å"
)

func parseDate(event *types.Event) []interface{} {
	fromDate := monday.Format(event.From, formatDate, locale)
	toDate := ""
	if event.From.Year() != event.To.Year() ||
		event.From.Month() != event.To.Month() ||
		event.From.Day() != event.To.Day() {
		toDate = monday.Format(event.To, formatDate, locale)
		toDate += ", "
	}

	return []interface{}{fromDate, event.From.Format(formatTime), toDate, event.To.Format(formatTime)}
}

func parseDateFullDay(event *types.Event) []interface{} {
	fromDate := monday.Format(event.From, formatDate, locale)
	toDate := ""
	if event.From.Year() != event.To.Year() ||
		event.From.Month() != event.To.Month() ||
		event.From.Day()+1 != event.To.Day() {
		toDate += "- "
		toDate += monday.Format(event.To, formatDate, locale)
	}

	return []interface{}{fromDate, toDate}
}

func SingleEventShortText(event *types.Event) string {
	shortEventText := ""
	title := event.Title
	if title == "" {
		title = eventNoTitleText
	}
	shortEventText += fmt.Sprintf(eventNameText, title)
	if !event.FullDay {
		shortEventText += fmt.Sprintf(eventTimeText, parseDate(event)...)
	} else {
		shortEventText += fmt.Sprintf(eventTimeFullDay, parseDateFullDay(event)...)
	}
	shortEventText += eventSplitLine
	shortEventText += fmt.Sprintf(eventCalendarText, event.Calendar.Title)

	return shortEventText
}

func SingleEventFullText(event *types.Event) string {
	fullEventText := ""
	title := event.Title
	if title == "" {
		title = eventNoTitleText
	}
	fullEventText += fmt.Sprintf(eventNameText, title)
	if !event.FullDay {
		fullEventText += fmt.Sprintf(eventTimeText, parseDate(event)...)
	} else {
		fullEventText += fmt.Sprintf(eventTimeFullDay, parseDateFullDay(event)...)
	}
	if event.Location.Description != "" {
		fullEventText += fmt.Sprintf(eventPlaceText, event.Location.Description)
	}
	organizer := event.Organizer.Name
	if organizer != "" {
		organizer += " "
	}
	email := event.Organizer.Email
	if email == telegram.CalendarInternalEmail {
		organizer = telegram.MailRuCalendarName
		email = telegram.MailRuDomain
	}
	fullEventText += "\n" + fmt.Sprintf(eventOrganizerText, organizer, email)

	if len(event.Location.Confrooms) > 0 {
		fullEventText += eventSplitLine
		fullEventText += eventConfroomsHeader
		for _, confroom := range event.Location.Confrooms {
			fullEventText += confroom + "\n"
		}
	}

	if len(event.Attendees) > 1 {
		fullEventText += eventSplitLine
		fullEventText += eventAttendeesHeaderText
		for _, attendee := range event.Attendees {
			if attendee.Email == event.Organizer.Email {
				continue
			}
			fullEventText += fmt.Sprintf(eventAttendeeText, attendee.Name, attendee.Email)
			switch attendee.Status {
			case "ACCEPTED":
				fullEventText += eventAttendeeStatusAccepted
				break
			case "DECLINED":
				fullEventText += eventAttendeeStatusDeclined
				break
			default:
				fullEventText += eventAttendeeStatusNeedsAction
				break
			}
		}
	}

	if event.Description != "" {
		fullEventText += eventSplitLine
		fullEventText += eventDescriptionHeader
		fullEventText += event.Description + "\n"
	}

	fullEventText += eventSplitLine
	fullEventText += fmt.Sprintf(eventCalendarText, event.Calendar.Title)
	return fullEventText
}

func RedisNotFoundMessage() string {
	return eventShowNotFoundError
}

func ShowMoreButton() string {
	return showMoreButton
}

func ShowLessButton() string {
	return showLessButton
}

func CallLinkButton() string {
	return callLinkButton
}

func CallbackResponseHeader(event *types.Event) string {
	return fmt.Sprintf(eventCallbackResponseText, event.Title)
}
func NoClosestEvents() string {
	return eventNoClosestEventFound
}

func GetInitDateMessage() string {
	return eventGetDateHeader + eventGetDateMessage
}

func GetTodayTitle() string {
	return eventTodayTitle
}

func GetDateTitle(date time.Time) string {
	return fmt.Sprintf(eventDateTitle, monday.Format(date, formatDate, locale))
}

func GetNextTitle() string {
	return eventNextTitle
}

func GetTodayNotFound() string {
	return eventNoTodayEventsFound
}

func GetDateEventsNotFound() string {
	return eventNoDateEventsFound
}

func GetDateNotParsed() string {
	return eventDateNotParsed
}

func RedisSessionNotFound() string {
	return eventSessionNotFound
}

func GetCancelDateReplyButton() string {
	return eventCancelSearchDate
}

func GetCancelDate() string {
	return eventCanceledSearchDate
}

func GetUserNotAuth() string {
	return middlewaresUserNotAuthenticated
}

func GetMessageAlertBase() string {
	return middlewaresGroupAlertBase
}

func GetGroupAlertMessage(data string) string {
	str := middlewaresGroupAlertBase
	if strings.Contains(data, telegram.Today) {
		return str + middlewaresGroupAlertToday
	}

	if strings.Contains(data, telegram.Next) {
		return str + middlewaresGroupAlertNext
	}

	if strings.Contains(data, telegram.Date) {
		return str + middlewaresGroupAlertDate
	}

	return ""
}

func GetCreateInitText() string {
	return createEventInitText
}

func GetCreateCancelText() string {
	return createEventCancelText
}

func GetCreateCanceledText() string {
	return createEventCanceledText
}

func GetCreateEventText(e *types.Event) string {
	str := ""
	str += createEventHeader

	if e.Title == "" {
		str += fmt.Sprintf(createEventTitle, eventNoTitleText)
	} else {
		str += fmt.Sprintf(createEventTitle, eventNoTitleText)
	}

	if !e.From.IsZero() {
		if !e.FullDay {
			str += fmt.Sprintf(createEventDateStart, monday.Format(e.From, formatDate, locale),
				monday.Format(e.From, formatTime, locale))
		} else {
			str += fmt.Sprintf(createEventDateStart, monday.Format(e.From, formatDate, locale),
				createEventAllDay)
		}
	}

	if !e.To.IsZero() && !e.FullDay {
		str += fmt.Sprintf(createEventDateEnd, monday.Format(e.From, formatDate, locale),
			monday.Format(e.From, formatTime, locale))
	}

	return str
}
