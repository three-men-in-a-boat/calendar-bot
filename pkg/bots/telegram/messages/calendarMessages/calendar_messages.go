package calendarMessages

import (
	"fmt"
	"github.com/calendar-bot/pkg/bots/telegram"
	"github.com/calendar-bot/pkg/types"
	"github.com/goodsign/monday"
	"github.com/senseyeio/spaniel"
	"strings"
	"time"
)

const (
	eventNameText                  = "<b>%s</b>\n\n"
	eventNoTitleText               = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
	eventTimeText                  = "<u>–ö–æ–≥–¥–∞:</u>\n\n‚è∞ %s, <u>%s</u> - %s<u>%s</u>\n"
	eventTimeFullDay               = "<u>–ö–æ–≥–¥–∞:</u>\n\n‚è∞ %s %s, <u>–í–µ—Å—å –¥–µ–Ω—å</u>\n"
	eventDateStart                 = "<u>–ö–æ–≥–¥–∞:</u>\n\n‚è∞ <b>–ù–∞—á–∞–ª–æ:</b> %s %s\n"
	eventPlaceText                 = "\n<u>–ì–¥–µ:</u>\n\nüìç %s\n"
	eventOrganizerText             = "\n–°–æ–∑–¥–∞—Ç–µ–ª—å - <b>%s</b> (%s)\n"
	eventSplitLine                 = "---------------\n"
	EventCalendarText              = "üóì –ö–∞–ª–µ–Ω–¥–∞—Ä—å <b>%s</b>"
	eventAttendeesHeaderText       = "<u><i>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</i></u>\n\n"
	eventAttendeeText              = "%s (%s) "
	eventAttendeeStatusAccepted    = "‚úÖ\n"
	eventAttendeeStatusNeedsAction = "‚ùì\n"
	eventAttendeeStatusDeclined    = "‚ùå\n"
	eventDescriptionHeader         = "<u><i>–û–ø–∏—Å–∞–Ω–∏–µ:</i></u>\n\n"
	eventConfroomsHeader           = "<u><i>–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:</i></u>\n\n"

	eventTodayTitle = "<b>–í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>"
	eventDateTitle  = "<b>–í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è –∑–∞ %s</b>"
	eventNextTitle  = "<b>–í–∞—à–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ</b>"

	eventGetDateHeader          = "<b>–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É: </b>\n\n"
	findTimeStartHeader         = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: </b>\n\n"
	findTimeStopHeader          = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω–∞—á–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: </b>\n\n"
	findTimeInfoHeader          = "<b>–ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è —ç—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ </b>\n\n"
	findTimeStartTime           = "<b>–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞: </b> %s\n"
	findTimeStopTime            = "<b>–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞: </b> %s"
	findTimeTextFormat          = "%s —Å %s –¥–æ %s"
	FindTimeChooseDayPartHeader = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–Ω—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è</b>\n\n"
	FindTimeChooseLengthHeader  = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è</b>\n\n"
	eventGetDateMessage         = "–î–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ " +
		"<pre>&lt;—á–∏—Å–ª–æ&gt; &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞&gt;</pre> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <pre>22 –º–∞—Ä—Ç–∞</pre>)"

	eventNoTodayEventsFound  = "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π —Å–µ–≥–æ–¥–Ω—è"
	eventNoDateEventsFound   = "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É"
	eventNoClosestEventFound = "–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π —Å–µ–≥–æ–¥–Ω—è"

	findTimePollHeader = "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å —É—á–∏—Ç—ã–≤–∞–ª—Å—è - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É " +
		"\"–£—á–∞—Å—Ç–≤—É—é\"\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–ª–µ–Ω–¥–∞—Ä–∏: "
	FindTimeAdd             = "‚úÖ –£—á–∞—Å—Ç–≤—É—é"
	FindTimeFind            = "–ù–∞–π—Ç–∏ –≤—Ä–µ–º—è"
	FindTimeBack            = "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
	FindTimeExist           = "–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ"
	FindTimeNotFound        = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã –Ω–µ –Ω–∞—à–ª–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
	FindTimePeriodIsTooLong = "–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Å–æ–∫—Ä–∞—â–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ"

	eventDateNotParsed      = "–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
	EventDateToIsBeforeFrom = "<b>–í–≤–µ–¥–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.</b>\n\n" +
		"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è - –∏–∑–º–µ–Ω–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è"
	eventSessionNotFound = "–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω—É–∂–Ω–æ–π –≤–∞–º " +
		"–∫–æ–º–∞–Ω–¥–æ–π –∑–∞–Ω–æ–≤–æ"
	EventNoEventDataFound = "<b>–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∞—á–µ." +
		"</b>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –£—á–µ–±–∞ –∑–∞–≤—Ç—Ä–∞ —Å 10:00 –¥–æ 13:00"
	eventShowNotFoundError = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏.\n–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ." +
		"\n–ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ."
	eventCallbackResponseText = "–°–æ–±—ã—Ç–∏–µ: %s"

	eventCancelSearchDate   = "–û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π"
	eventCanceledSearchDate = "–ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω"

	createEventHeader  = "<u><b>–ß—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è:</b></u>\n\n"
	createdEventHeader = "<u><b>–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ:</b></u>\n\n"

	createEventInitText = "<b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è</b>\n\n–î–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è" +
		" –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <pre>&lt;—á–∏—Å–ª–æ&gt; &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞&gt; " +
		"&lt;–ß–ß:–ú–ú&gt;</pre> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 22 –º–∞—Ä—Ç–∞ 15:00)"
	createEventToText = "<b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è</b>\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è" +
		" –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω–æ—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <pre>&lt;—á–∏—Å–ª–æ&gt; &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞&gt; " +
		"&lt;–ß–ß:–ú–ú&gt;</pre> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 22 –º–∞—Ä—Ç–∞ 15:00)"
	createEventTitleText    = "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</b>"
	CreateEventDescText     = "<b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</b>"
	CreateEventLocationText = "<b>–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Å–æ–±—ã—Ç–∏—è</b>"
	CreateEventUserText     = "<b>–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å. –ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ" +
		" —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é</b>"

	createEventCreateText   = "–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"
	createEventCreatedText  = "–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ"
	createEventCancelText   = "–û—Ç–º–µ–Ω–∞"
	createEventCanceledText = "–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ"

	createEventHalfHour    = "30 –º–∏–Ω—É—Ç"
	createEventHour        = "1 —á–∞—Å"
	createEventHourAndHalf = "1 —á–∞—Å 30 –º–∏–Ω—É—Ç"
	createEventTwoHours    = "2 —á–∞—Å–∞"
	createEventFourHours   = "4 —á–∞—Å–∞"
	createEventSixHours    = "6 —á–∞—Å–æ–≤"
	createEventFullDay     = "–í–µ—Å—å –¥–µ–Ω—å"

	CreateEventChangeStartTimeButton = "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞"
	CreateEventChangeStopTimeButton  = "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è"
	CreateEventAddTitleButton        = "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"
	CreateEventChangeTitleButton     = "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"
	CreateEventAddDescButton         = "–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"
	CreateEventChangeDescButton      = "–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"
	CreateEventAddLocationButton     = "–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ"
	CreateEventChangeLocationButton  = "–ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ"
	CreateEventAddUser               = "–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"

	ShowTodayTasks  = "–ø–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
	ShowTodayPhrase = "–ø–æ–∫–∞–∂–∏ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
	ShowNextTask    = "–ø–æ–∫–∞–∂–∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ"
	ShowNextPhrase  = "–ø–æ–∫–∞–∂–∏ –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏—è"

	CreateEventGo    = "‚úÖ –Ø –∏–¥—É"
	CreateEventNotGo = "‚ùå –Ø –Ω–µ –∏–¥—É"

	CreateEventAlreadyOrganize = "–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Å–æ–±—ã—Ç–∏—è –∏ —É—á–∞—Å—Ç—É–µ—Ç–µ –≤ –Ω–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
	CreateEventAlreadyGo       = "–í—ã —É–∂–µ –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏–∏"
	CreateEventAlreadyNotGo    = "–í—ã —É–∂–µ –¥–∞–ª–∏ –æ—Ç–∫–∞–∑ –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–±—ã—Ç–∏–∏"
	CreateEventCannotAdd       = "–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à —Å—Ç–∞—Ç—É—Å –≤ —Å–æ–±—ã—Ç–∏–∏ - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–ª–∏ –ø–∏—Å—å–º–∞" +
		" –∏–∑ –ø–æ—á—Ç—ã"

	CreateEventFindTimeMessage   = "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ?"
	CreateEventFindTimeYesButton = "üîç –ù–∞–π—Ç–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è"
	CreateEventFindTimeNoButton  = "‚è∞ –°–æ–∑–¥–∞—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è"

	middlewaresUserNotAuthenticated = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –ø–æ–∫–∞ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç–µ—Å—å –≤ –±–æ—Ç–µ —á–µ—Ä–µ–∑" +
		" –∞–∫–∫–∞—É–Ω—Ç mail.ru. –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start."
	middlewaresGroupAlertBase  = "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å "
	middlewaresGroupAlertToday = "<b>–í–°–ï–ú</b> —Å–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?"
	middlewaresGroupAlertNext  = "<b>–í–°–ï–ú</b> —Å–≤–æ—ë —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?"
	middlewaresGroupAlertDate  = "<b>–í–°–ï–ú</b> —Å–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É?"

	userNotAllow = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –¥–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π"
)

const (
	formatSpan = "2 January"
	formatDate = "2 January 2006"
	formatTime = "15:04"
	locale     = monday.LocaleRuRU
)

const (
	callLinkButton = "üì≤ –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫"
	showMoreButton = "üîª –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å"
	showLessButton = "üî∫ –°–≤–µ—Ä–Ω—É—Ç—å"
)

func parseDate(event *types.Event) []interface{} {
	fromDate := monday.Format(event.From, formatDate, locale)
	toDate := ""
	if event.From.Year() != event.To.Year() ||
		event.From.Month() != event.To.Month() ||
		event.From.Day() != event.To.Day() {
		toDate = monday.Format(event.To, formatDate, locale)
		toDate += ", "
	}

	return []interface{}{fromDate, event.From.Format(formatTime), toDate, event.To.Format(formatTime)}
}

func parseDateFullDay(event *types.Event) []interface{} {
	fromDate := monday.Format(event.From, formatDate, locale)
	toDate := ""
	if event.From.Year() != event.To.Year() ||
		event.From.Month() != event.To.Month() ||
		event.From.Day()+1 != event.To.Day() {
		toDate += "- "
		toDate += monday.Format(event.To, formatDate, locale)
	}

	return []interface{}{fromDate, toDate}
}

func SingleEventShortText(event *types.Event, isCalendarSend bool) string {
	shortEventText := ""
	title := event.Title
	if title == "" {
		title = eventNoTitleText
	}
	shortEventText += fmt.Sprintf(eventNameText, title)
	if !event.FullDay {
		shortEventText += fmt.Sprintf(eventTimeText, parseDate(event)...)
	} else {
		shortEventText += fmt.Sprintf(eventTimeFullDay, parseDateFullDay(event)...)
	}

	if isCalendarSend {
		shortEventText += eventSplitLine
		shortEventText += fmt.Sprintf(EventCalendarText, event.Calendar.Title)
	}
	return shortEventText
}

func SingleEventFullText(event *types.Event) string {
	fullEventText := ""
	title := event.Title
	if title == "" {
		title = eventNoTitleText
	}
	fullEventText += fmt.Sprintf(eventNameText, title)

	if event.To.IsZero() && !event.From.IsZero() {
		fullEventText += fmt.Sprintf(eventDateStart, monday.Format(event.From, formatDate, locale),
			monday.Format(event.From, formatTime, locale))
	} else {
		if !event.FullDay {
			fullEventText += fmt.Sprintf(eventTimeText, parseDate(event)...)
		} else {
			fullEventText += fmt.Sprintf(eventTimeFullDay, parseDateFullDay(event)...)
		}
	}
	if event.Location.Description != "" {
		fullEventText += fmt.Sprintf(eventPlaceText, event.Location.Description)
	}

	organizer := event.Organizer.Name
	if organizer != "" {
		organizer += " "
	}
	email := event.Organizer.Email
	if email == telegram.CalendarInternalEmail {
		organizer = telegram.MailRuCalendarName
		email = telegram.MailRuDomain
	}
	fullEventText += "\n" + fmt.Sprintf(eventOrganizerText, organizer, email)

	if len(event.Location.Confrooms) > 0 {
		fullEventText += eventSplitLine
		fullEventText += eventConfroomsHeader
		for _, confroom := range event.Location.Confrooms {
			fullEventText += confroom + "\n"
		}
	}

	if len(event.Attendees) > 1 {
		fullEventText += eventAttendeesHeaderText
		for _, attendee := range event.Attendees {
			if attendee.Email == event.Organizer.Email {
				continue
			}
			fullEventText += fmt.Sprintf(eventAttendeeText, attendee.Name, attendee.Email)
			switch attendee.Status {
			case telegram.StatusAccepted:
				fullEventText += eventAttendeeStatusAccepted
			case telegram.StatusDeclined:
				fullEventText += eventAttendeeStatusDeclined
			default:
				fullEventText += eventAttendeeStatusNeedsAction
			}
		}
	}

	if event.Description != "" {
		fullEventText += eventSplitLine
		fullEventText += eventDescriptionHeader
		fullEventText += event.Description + "\n"
	}

	if event.Calendar.Title != "" {
		fullEventText += eventSplitLine
		fullEventText += fmt.Sprintf(EventCalendarText, event.Calendar.Title)
	}

	return fullEventText
}

func RedisNotFoundMessage() string {
	return eventShowNotFoundError
}

func ShowMoreButton() string {
	return showMoreButton
}

func ShowLessButton() string {
	return showLessButton
}

func CallLinkButton() string {
	return callLinkButton
}

func CallbackResponseHeader(event *types.Event) string {
	return fmt.Sprintf(eventCallbackResponseText, event.Title)
}
func NoClosestEvents() string {
	return eventNoClosestEventFound
}

func GetInitDateMessage() string {
	return eventGetDateHeader + eventGetDateMessage
}

func GetTodayTitle() string {
	return eventTodayTitle
}

func GetDateTitle(date time.Time) string {
	return fmt.Sprintf(eventDateTitle, monday.Format(date, formatDate, locale))
}

func GetNextTitle() string {
	return eventNextTitle
}

func GetTodayNotFound() string {
	return eventNoTodayEventsFound
}

func GetDateEventsNotFound() string {
	return eventNoDateEventsFound
}

func GetDateNotParsed() string {
	return eventDateNotParsed
}

func RedisSessionNotFound() string {
	return eventSessionNotFound
}

func GetCancelDateReplyButton() string {
	return eventCancelSearchDate
}

func GetCancelDate() string {
	return eventCanceledSearchDate
}

func GetUserNotAuth() string {
	return middlewaresUserNotAuthenticated
}

func GetMessageAlertBase() string {
	return middlewaresGroupAlertBase
}

func GetGroupAlertMessage(data string) string {
	str := middlewaresGroupAlertBase
	if strings.Contains(data, telegram.Today) {
		return str + middlewaresGroupAlertToday
	}

	if strings.Contains(data, telegram.Next) {
		return str + middlewaresGroupAlertNext
	}

	if strings.Contains(data, telegram.Date) {
		return str + middlewaresGroupAlertDate
	}

	return ""
}

func GetCreateInitText() string {
	return createEventInitText
}

func GetCreateCancelText() string {
	return createEventCancelText
}

func GetCreateCanceledText() string {
	return createEventCanceledText
}

func GetCreateEventHeader() string {
	return createEventHeader
}

func GetCreateEventCreateText() string {
	return createEventCreateText
}

func GetCreateEventHalfHour() string {
	return createEventHalfHour
}
func GetCreateEventHour() string {
	return createEventHour
}
func GetCreateEventHourAndHalf() string {
	return createEventHourAndHalf
}
func GetCreateEventTwoHours() string {
	return createEventTwoHours
}
func GetCreateEventFourHours() string {
	return createEventFourHours
}
func GetCreateEventSixHours() string {
	return createEventSixHours
}

func GetCreateEventToText() string {
	return createEventToText
}

func GetUserNotAllow() string {
	return userNotAllow
}

func GetEventCreatedText() string {
	return createEventCreatedText
}

func GetCreatedEventHeader() string {
	return createdEventHeader
}

func GetCreateFullDay() string {
	return createEventFullDay
}

func GetCreateEventTitle() string {
	return createEventTitleText
}

func GetFindTimeStartText() string {
	return findTimeStartHeader + eventGetDateMessage
}

func GetFindTimeStopText(time time.Time) string {
	return findTimeStopHeader + fmt.Sprintf(findTimeStartTime, monday.Format(time, formatDate, locale)) +
		"\n" + eventGetDateMessage
}

func GetFindTimeInfoText(timeFrom, timeTo time.Time) string {
	return findTimeInfoHeader + fmt.Sprintf(findTimeStartTime, monday.Format(timeFrom, formatDate, locale)) +
		fmt.Sprintf(findTimeStopTime, monday.Format(timeTo, formatDate, locale))
}

func GenOptionsForPoll(spans spaniel.Spans) []string {
	str := make([]string, 0)
	counter := 0
	for _, span := range spans {
		if counter == 9 {
			return str
		}
		str = append(str, fmt.Sprintf(findTimeTextFormat,
			monday.Format(span.Start(), formatSpan, locale),
			monday.Format(span.Start(), formatTime, locale),
			monday.Format(span.End(), formatTime, locale),
		))
		counter++
	}

	return str
}

func GenFindTimePollHeader(emails []string) string {
	return findTimePollHeader + strings.Join(emails, ", ")
}

func AddNameBold(name string) string {
	return "<b>, " + name + "</b>"
}

func AddName(name string) string {
	return ", " + name
}

func AddNameStartBold(name string) string {
	return "<b>" + name + ": </b>"
}
